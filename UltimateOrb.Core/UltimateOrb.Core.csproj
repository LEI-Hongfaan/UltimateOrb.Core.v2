<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <Authors>LEI Hongfaan</Authors>
    <Company>LEI Hongfaan</Company>
    <Product>UltimateOrb Libraries</Product>
    <Description>UltimateOrb Base Class Library.</Description>
    <Copyright>Copyright Â© 2017 LEI Hongfaan. Distributed under the MIT License.</Copyright>
    <PackageLicenseUrl>https://github.com/LEI-Hongfaan/UltimateOrb.Core/blob/master/LICENSE</PackageLicenseUrl>
    <PackageProjectUrl>https://github.com/LEI-Hongfaan/UltimateOrb.Core</PackageProjectUrl>
    <PackageReleaseNotes>Experimental.
This package does not include the test suite. See Project Site for more information.
</PackageReleaseNotes>
    <PackageTags>UltimateOrb Core BCL ref Int128 UInt128 Rational Rational64 Monad Linq</PackageTags>
    <Title>UltimateOrb.Core - UltimateOrb Libraries</Title>
    <AssemblyVersion>1</AssemblyVersion>
    <FileVersion>1</FileVersion>
    <Version>1.4.0.7</Version>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <PackageRequireLicenseAcceptance>true</PackageRequireLicenseAcceptance>
    <RunPostBuildEvent>Always</RunPostBuildEvent>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <CheckForOverflowUnderflow>true</CheckForOverflowUnderflow>
    <DocumentationFile>bin\Release\netstandard2.0\UltimateOrb.Core.xml</DocumentationFile>
    <LangVersion>latest</LangVersion>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <CheckForOverflowUnderflow>true</CheckForOverflowUnderflow>
    <DocumentationFile>bin\Debug\netstandard2.0\UltimateOrb.Core.xml</DocumentationFile>
    <LangVersion>latest</LangVersion>
  </PropertyGroup>

  <ItemGroup>
    <None Remove="Nonstrict.ToNonstrictCachedResults.cs~RF651267b7.TMP" />
    <None Remove="Wrapper{Module}.tt~RF8e349e36.TMP" />
  </ItemGroup>

  <ItemGroup>
    <None Update="DoubleArithmetic{Compare}.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>DoubleArithmetic{Compare}.cs</LastGenOutput>
    </None>
    <None Update="DoubleArithmetic{Core}.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>DoubleArithmetic{Core}.cs</LastGenOutput>
    </None>
    <None Update="DoubleArithmetic{Increase,Decrease}.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>DoubleArithmetic{Increase,Decrease}.cs</LastGenOutput>
    </None>
    <None Update="DoubleArithmetic{Shift}.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>DoubleArithmetic{Shift}.cs</LastGenOutput>
    </None>
    <None Update="IInitializable.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>IInitializable.cs</LastGenOutput>
    </None>
    <None Update="SignConverter.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>SignConverter.cs</LastGenOutput>
    </None>
    <None Update="IO.Core.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>IO.Core.cs</LastGenOutput>
    </None>
    <None Update="Wrapper{Module}.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>Wrapper{Module}.cs</LastGenOutput>
    </None>
  </ItemGroup>

  <ItemGroup>
    <Service Include="{508349b6-6b84-4df5-91f0-309beebad82d}" />
  </ItemGroup>

  <ItemGroup>
    <Compile Update="DoubleArithmetic{Compare}.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>DoubleArithmetic{Compare}.tt</DependentUpon>
    </Compile>
    <Compile Update="DoubleArithmetic{Core}.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>DoubleArithmetic{Core}.tt</DependentUpon>
    </Compile>
    <Compile Update="DoubleArithmetic{Increase,Decrease}.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>DoubleArithmetic{Increase,Decrease}.tt</DependentUpon>
    </Compile>
    <Compile Update="DoubleArithmetic{Shift}.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>DoubleArithmetic{Shift}.tt</DependentUpon>
    </Compile>
    <Compile Update="IInitializable.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>IInitializable.tt</DependentUpon>
    </Compile>
    <Compile Update="SignConverter.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>SignConverter.tt</DependentUpon>
    </Compile>
    <Compile Update="IO.Core.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>IO.Core.tt</DependentUpon>
    </Compile>
    <Compile Update="Wrapper{Module}.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>Wrapper{Module}.tt</DependentUpon>
    </Compile>
  </ItemGroup>

  <Target Name="PostBuild" AfterTargets="PostBuildEvent">
    <Exec Command="cd /d &quot;$(SolutionDir)\$(ProjectName).BuildTools\BuildTools&quot;&#xD;&#xA;echo Invoking build tools to modify the output assembly...&#xD;&#xA;dotnet &quot;$(TargetName).BuildTools.dll&quot; &quot;$(TargetPath)&quot;&#xD;&#xA;cd /d &quot;$(ProjectDir)&quot;&#xD;&#xA;echo To sign the assembly, rebuild with 'Sign the assembly', then use the command:&#xD;&#xA;echo     sn -Ra &quot;$(TargetPath)&quot; &quot;$(ProjectDir)test.snk&quot;&#xD;&#xA;echo To verify the assembly, use the command:&#xD;&#xA;echo     peverify &quot;$(TargetPath)&quot;&#xD;&#xA;echo If PEVerify can not resolve the dependent assemblies ([HRESULT 0x80070002]), edit '*.dll.config' files and copy them to the same directory as the output assembly.&#xD;&#xA;" />
  </Target>

</Project>
